// Verb Tenses Identifier

Phase: VerbTenses
Input: Token
Options: control = appelt

// MACROS


Macro: ADVS
(
({Token.category == RB})[1,3]
)

Macro: DO
({Token.string == "do"}|{Token.string == "does"} | {Token.string == "did"})

Macro: NEGATION
(
 (DO)?
({Token.string == "not"}) |
({Token.string == "n't"}) |
({Token.string == "never"})
)


Rule: VTPresentSimpleActiveNegative
// Simple Present Active: does not eat

(
(DO)
(NEGATION)
(
{Token.category == "VB"}
)
):annotate 
--> :annotate.PresentSimpleActive = 
{ type = "VT",
  tense = "PresentSimple",
  voice = "Аctive",
    form = "negative",
  rule = "VTPresentSimpleActiveNegative"}

  

Rule: VTPresentSimplePasNeg
// Simple Present Passive: is not eaten
// (is | are) VBN

(

({Token.string == "is" } | { Token.string == "are" })

(NEGATION) (ADVS)?

{Token.category == "VBN"}



):annotate --> :annotate.PresentSimplePassive = 

{ type = "VT",
  tense = "PresentSimple",
  voice = "passive",
    form = "negative",
  rule = "VTPresentSimplePasNeg"
}


Rule: VTPresentContinuousActNeg
// Present Continuous Active: is not eating
// (is | are) VBG

(

({Token.string == "is"} | {Token.string == "are"})

(NEGATION) (ADVS)?

{Token.category == "VBG"}


):annotate -->
:annotate.PresentContinuousActive  = { type = "VT",
  tense = "PresentContinuous",
  voice = "active",
    form = "negative" ,
  rule  = "VTPresentContinuousActNeg"
  }


Rule: VTPresentContinuousPasNeg
// Present Continuous Passive: is not being  eaten
// (is | are) being  VBN

(

({Token.string == "is"} | {Token.string == "are"})

(NEGATION) (ADVS)?
{Token.string == "being"}


{Token.string == "been"}

{Token.category == "VBN"}


):annotate -->

:annotate.PresentContinuousPassive = {
    type = "VT",
  tense = "PresentContinuous",
  voice = "active",
    form = "negative" ,
  rule = "VTPresentContinuousPasNeg"}

Rule: VTPresentPerfectActNeg
// Present Perfect Active: has not eaten
// (has | have) VBN

(

({Token.string == "has"} | {Token.string == "have"})

(NEGATION) (ADVS)?

{Token.category == VBN}

):annotate -->

:annotate.PresentPerfectActive = {
type = "VT",
tense = "PresentPerfect",
voice = "active",
  form = "negative",
rule = "VTPresentPerfectActNeg"
}

Rule: VTPresentPerfectPasNeg
// Present Perfect Passive: has not been eaten
// (has | have) been VBN

(

({Token.string == "has"} | {Token.string == "have"})
(NEGATION) (ADVS)?
{Token.string == "been"}

{Token.category == VBN}

):annotate -->

:annotate.PresentPerfectPassive = {
type = "VT",
tense = "PresentPerfect",
voice = "passive",
  form = "negative",
rule = "VTPresentPerfectPasNeg"
}

Rule: VTPresentPerfectConActNeg
// Present Perfect Continuous Active: has not been eating
// (has | have) been VBG

(
({Token.string == "has"} | {Token.string == "have"})


(NEGATION) (ADVS)?
{Token.string == "been"}
{Token.category == VBG}
):annotate
-->
:annotate.PresentPerfectContinuousActive = {
type = "VT",
tense = "PresentPerfectContinuous",
voice = "active",
  form = "negative",
rule = "VTPresentPerfectConActNeg"
}


Rule: VTPastSimplePasNeg
// Simple Past Passive: was not eaten
// (was | were) VBN

(
({Token.string == "was"} | {Token.string == "were"})
(NEGATION) (ADVS)?
{Token.category == VBN}
):annotate -->
:annotate.PastSimplePassive = {
type = "VT",
tense = "PastSimplePassive",
voice = "passive",
  form = "negative",
rule = "VTPastSimplePasNeg"
}


Rule: VTPastContinuousActNeg
// Past Continuous Active: was not eating
// (was | were) VBG

(
({Token.string == "was"} | {Token.string == "were"})
(NEGATION) (ADVS)?
{Token.category == VBG}
):annotate -->
:annotate.PastContinuousActive = {
type = "VT",
tense = "PastContinuous",
voice = "active",
  form = "negative",
rule = "VTPastContinuousActNeg"
}


Rule: VTPastContinuousPasNeg
// Past Continuous Passive: was not eating
// (was | were) being VBN

(
({Token.string == "was"} | {Token.string == "were"})
(NEGATION) (ADVS)?
{Token.string == "being"}
{Token.category == VBN}
):annotate 
-->
:annotate.PastContinuousPassive = {
type = "VT",
tense = "PastContinuous",
voice = "passive",
  form = "negative",
rule = "VTPastContinuousPasNeg"

}

Rule: VTPastPerfectActNeg
// Past Perfect Active: had not eaten
//  had VBN

(
{Token.string == "had"}
(NEGATION) (ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PastPerfectActive = {
type = "VT",
tense = "PastPerfect",
voice = "active",
  form = "negative",
rule = "VTPastPerfectActNeg"
}


Rule: VTPastPerfectPasNeg
// Past Perfect Passive: had not been eaten
//  had been VBN

(
{Token.string == "had"}

(NEGATION) (ADVS)?
{Token.string == "been"}

{Token.category == VBN}
):annotate
-->
:annotate.PastPerfectPassive = {
type = "VT",
tense = "PastPerfect",
voice = "passive",
  form = "negative",
rule = "VTPastPerfectPasNeg"
}

Rule: VTPastPerfectConActNeg
// Past Perfect Continuous Active: had not been eating
//  had been VBG

(
{Token.string == "had"}
(NEGATION) (ADVS)?
{Token.string == "been"}
{Token.category == VBG}
):annotate
-->
:annotate.PastPerfectContinuousActive = {
type = "VT",
tense = "PastPerfectContinuous",
voice = "active",
  form = "negative",
rule = "VTPastPerfectConActNeg"
}

Rule: VTPastPerfectConPasNeg
// Past Perfect Continuous Passive: had not been being eaten
//  had been VBG

(
{Token.string == "had"}
(NEGATION) (ADVS)?
{Token.string == "been"}
{Token.string == "being"}

{Token.category == VBN}
):annotate 
-->
:annotate.PastPerfectContinuousPassive = {
type = "VT",
tense = "PastPerfectContinuous",
voice = "passive",
  form = "negative",
rule = "VTPastPerfectConPasNeg"
}


Rule: VTFutureSimpleActNeg
// Simple Future Active: will not eat
// (will | shall) VB

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"})
(NEGATION) (ADVS)?
{Token.category == VB}
):annotate 
-->
:annotate.FutureSimpleActive = {
type = "VT",
tense = "FutureSimple",
voice = "active",
  form = "negative",
rule = "VTFutureSimpleActNeg"
}


Rule: VTFutureSimplePasNeg
// Simple Future PassiveFutureSimple: will not be eaten
// (will | shall) be  VBN

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
(NEGATION) (ADVS)?
{Token.string == "be"}
{Token.category == VB}
):annotate 
-->
:annotate.FutureSimplePassive = {
type = "VT",
tense = "FutureSimple",
voice = "passive",
  form = "negative",
rule = "VTFutureSimplePasNeg"
}


Rule: VTFutureContinuousActNeg
// Future Continuous Active: will not be eating
// (will | shall) be VBG

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)


(NEGATION) (ADVS)?
{Token.string == "be"}
{Token.category == VBG}
):annotate 
-->
:annotate.FutureContinuousActive = {
type = "VT",
tense = "FutureContinuous",
voice = "active",
  form = "negative",
rule = "VTFutureContinuousActNeg"

}

Rule: VTFutureContinuousPasNeg
// Future Continuous Passive: will not be being  eaten
// (will | shall) be being VBN

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
(NEGATION) (ADVS)?
{Token.string == "be"}
{Token.string == "being"}
{Token.category == VBN}
):annotate 
-->
:annotate.FutureContinuousPassive = {
type = "VT",
tense = "FutureContinuous",
voice = "passive",
  form = "negative",
rule = "VTFutureContinuousPasNeg"

}


Rule: VTFuturePerfectActNeg
// Future Pefect Active: will not have eaten
// (will | shall) have  VBN

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
(NEGATION) (ADVS)?
{Token.string == "have"}
{Token.category == VBN}
):annotate 
-->
:annotate.FuturePerfectActive = {
type = "VT",
tense = "FuturePerfect",
voice = "active",
  form = "negative",
rule = "VTFuturePerfectActNeg"

}

Rule: VTFuturePerfectPasNeg
// Future Pefect Active: will not have been eaten
// (will | shall) have  been VBN

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
(NEGATION) (ADVS)?
{Token.string == "have"}
{Token.string == "been"}
{Token.category == VBN}
):annotate 
-->
:annotate.FuturePerfectActive = {
type = "VT",
tense = "FuturePerfect",
voice = "passive",
  form = "negative",
rule = "VTFuturePerfectPasNeg"
}


Rule: VTFuturePerfectConActNeg
// Future Pefect Continuous Active: will not have been eating
// (will | shall) have been VBG

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
(NEGATION) (ADVS)?
{Token.string == "have"}
{Token.string == "been"}
{Token.category == VBG}
):annotate 
-->
:annotate.FuturePerfectContinuousActive = {
type = "VT",
tense = "FuturePerfectContinuous",
voice = "active",
  form = "negative",
rule = "VTFuturePerfectConActNeg"
}



Rule: VTFuturePerfectConPasNeg
// Future Perfect Continuous Passive: will not have been being eaten
// (will | shall) have been being VBN

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
(NEGATION) (ADVS)?
{Token.string == "have"}
{Token.string == "been"}
{Token.string == "being"}
{Token.category == VBN}
):annotate 
-->
:annotate.FuturePerfectContinuousPassive = {
type = "VT",
tense = "FuturePerfectContinuous",
voice = "passive",
  form = "negative",
rule = "VTFuturePerfectConPasNeg"
}


Rule: VTPresentSimpleActNeg

(
(NEGATION) (ADVS)?
({Token.category == "VB"})
)
:annotate 
-->
:annotate.PresentSimpleActive = 
{ type = "VT",
  tense = "PresentSimple",
  voice = "active",
  form = "negative",
rule = "VTPresentSimpleActNeg"
}


Rule: VTPastSimpleActNeg

(
({ Token.string == "did"})
(NEGATION) (ADVS)?
({Token.category == "VB"})
)
:annotate
--> 
:annotate.PastSimpleActive = 
{ type = "VT",
  tense = "PastSimple",
  voice = "active",
  form = "negative",
rule = "VTPastSimpleActNeg"
}


Rule: VTPresentSimpleActNeg
// Simple Present Active: is not
// VB not

(
(
({ Token.string == "is"})
|
({ Token.string == "are"})
|
({ Token.string == "be"})
|
({ Token.string == "am"})
|
({ Token.string == "have"})
|
({ Token.string == "has"})
)
(NEGATION) 
)
:annotate --> :annotate.PresentSimpleActive = 

{ type = "VT",
  tense = "PresentSimple",
  voice = "active",
  form = "negative",
rule = "VTPresentSimpleActNeg"}


Rule: VTPastSimpleActNeg
// Simple Passive Active: was not

(
(
({ Token.string == "was"})
|
({ Token.string == "were"})
|
({ Token.string == "had"})
)
(NEGATION) 
):annotate 
--> 
:annotate.PastSimpleActive = 
{ type = "VT",
  tense = "PastSimple",
  voice = "active",
  form = "negative",
rule = "VTPastSimpleActNeg"}

Rule: VTPresentContinuousActNeg
// Present Continuous Active: 

(
(NEGATION) (ADVS)?
{Token.category == "VBG"}
):annotate 
-->
:annotate.PresentContinuousActive  = 
{ type = "VT",
  tense = "PresentContinuous",
  voice = "active" ,
  form = "negative",
rule = "VTPresentContinuousActNeg"}


////////////////////////////////////////////////////////////
// VT.jape

// Finite Verb Groups


Rule: VTPresentSimpleActive
// Simple Present Active: eats or eat

(
(
{Token.category == "VBP"}
|
{Token.category == "VBZ"}
)
):annotate 
--> :annotate.PresentSimpleActive = 
{ type = "VT",
  tense = "PresentSimple",
  voice = "active",
  neg = "no",
  rule = "VTPresentSimpleActive"}

 Rule: VTPresentSimplePas
// Simple Present Passive: are eaten
// (is | are) VBN

(

({Token.string == "is" } | { Token.string == "are" })

(ADVS)?

{Token.category == "VBN"}



):annotate --> :annotate.PresentSimplePassive = 

{ type = "VT",
  tense = "PresentSimple",
  voice = "passive",
  neg = "no",
  rule = "VTPresentSimplePas"
}

Rule: VTPresentContinuousActive
// Present Continuous Active: is eating or are eating
// (is | are) VBG

(
({Token.string == "is"} | {Token.string == "are"})
(ADVS)?
{Token.category == "VBG"}
):annotate
-->
:annotate.PresentContinuousActive  = 
{ type = "VT",
  tense = "PresentContinuous",
  voice = "Active",
  rule = "VTPresentContinuousActive"}


Rule: VTPresentContinuousPas
// Present Continuous Passive: is being  eaten or are being  eaten
// (is | are) being  VBN

(
({Token.string == "is"} | {Token.string == "are"})?
{Token.string == "being"}
(ADVS)?
{Token.category == "VBN"}
):annotate 
-->
:annotate.PresentContinuousPassive = 
{ type = "VT",
  tense = "PresentContinuous",
  voice = "Active" ,
 rule =  "VTPresentContinuousPas"}

Rule: VTPresentPerfectActive
// Present Perfect Active: has eaten


(
({Token.string == "has"} | {Token.string == "have"})
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PresentPerfectActive = {
type = "VT",
tense = "PresentPerfect",
voice = "Active",
rule = "VTPresentPerfectActive"
}

Rule: VTPresentPerfectPas
// Present Perfect Passive: has been eaten

(
({Token.string == "has"} | {Token.string == "have"})
{Token.string == "been"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PresentPerfectPassive = {
type = "VT",
tense = "PresentPerfect",
voice = "passive",
rule = "VTPresentPerfectPas"
}

Rule: VTPresentPerfectConActive
// Present Perfect Continuous Active: has been eating

(
({Token.string == "has"} | {Token.string == "have"})
{Token.string == "been"}
(ADVS)?
{Token.category == VBG}
):annotate 
-->
:annotate.PresentPerfectContinuousActive = {
type = "VT",
tense = "PresentPerfectContinuous",
voice = "Active",
rule = "VTPresentPerfectConActive"
}

Rule: VTPresentPerfectConPas
// Present Perfect Continuous Passive: (very rare) has been being eaten

(
({Token.string == "has"} | {Token.string == "have"})
{Token.string == "been"}
{Token.string == "being"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PresentPerfectContinuousPassive = {
type = "VT",
tense = "PresentPerfectContinuous",
voice = "passive",
rule = "VTPresentPerfectConPas"
}

Rule: VTPastSimpleActive
// Simple Past Active: ate

(
//(ADVS)?
{Token.category == VBD}
):annotate 
-->
:annotate.PastSimpleActive = {
type = "VT",
tense = "PastSimpleActive",
voice = "Active",
rule = "VTPastSimpleActive"
}


Rule: VTPastSimplePas
// Simple Past Passive: was eaten

(
({Token.string == "was"} | {Token.string == "were"})
(ADVS)?
{Token.category == VBN}
):annotate
-->
:annotate.PastSimplePassive = {
type = "VT",
tense = "PastSimple",
voice = "passive",
rule = "VTPastSimplePas"
}


Rule: VTPastContinuousActive
// Past Continuous Active: was eating

(
({Token.string == "was"} | {Token.string == "were"})
(ADVS)?
{Token.category == VBG}
):annotate 
-->
:annotate.PastContinuousActive = {
type = "VT",
tense = "PastContinuous",
voice = "Active",
rule = "VTPastContinuousActive"
}


Rule: VTPastContinuousPas
// Past Continuous Passive: was eating

(
({Token.string == "was"} | {Token.string == "were"})
{Token.string == "being"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PastContinuousPassive = {
type = "VT",
tense = "PastContinuous",
voice = "passive",
rule = "VTPastContinuousActive"
}

Rule: VTPastPerfectActive
// Past Perfect Active: had eaten

(
{Token.string == "had"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PastPerfectActive = {
type = "VT",
tense = "PastPerfect",
voice = "Active",
rule = "VTPastPerfectActive"
}


Rule: VTPastPerfectPas
// Past Perfect Passive: had been eaten

(
{Token.string == "had"}
{Token.string == "been"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PastPerfectPassive = {
type = "VT",
tense = "PastPerfect",
voice = "passive",
rule = "VTPastPerfectPas"
}

Rule: VTPastPerfectConActive
// Past Perfect Continuous Active: had been eating

(
{Token.string == "had"}
{Token.string == "been"}
(ADVS)?
{Token.category == VBG}
):annotate 
-->
:annotate.PastPerfectContinuousActive = {
type = "VT",
tense = "PastPerfectCon",
voice = "Active",
rule = "VTPastPerfectPas"
}

Rule: VTPastPerfectConPas
// Past Perfect Continuous Passive: had been being eaten

(
{Token.string == "had"}
{Token.string == "been"}
{Token.string == "being"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.PastPerfectContinuousPassive = {
type = "VT",
tense = "PastPerfectCon",
voice = "passive",
rule = "VTPastPerfectConPas"
}


Rule: VTFutureSimpleActive
// Simple Future Active: will eat

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
(ADVS)?
{Token.category == VB}
):annotate 
-->
:annotate.FutureSimpleActive = {
type = "VT",
tense = "FutureSimple",
voice = "Active",
rule = "VTFutureSimpleActive"
}


Rule: VTFutureSimplePas
// Simple Future Passive: will be eaten

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
{Token.string == "be"}
(ADVS)?
{Token.category == VB}
):annotate 
-->
:annotate.FutureSimplePassive = {
type = "VT",
tense = "FutureSimplePassive",
voice = "passive",
rule = "VTFutureSimplePas"
}


Rule: VTFutureContinuousActive
// Future Continuous Active: will be eating

(
({Token.string == "will"} | {Token.string == "shall"}

| {Token.string == "wo"} | {Token.string == "'ll"}
)

{Token.string == "be"}
(ADVS)?
{Token.category == VBG}
):annotate 
-->
:annotate.FutureContinuousActive = {
type = "VT",
tense = "FutureContinuous",
voice = "Active",
rule = "VTFutureContinuousActive"
}

Rule: VTFutureContinuousPas
// Future Continuous Pasive: will be being  eaten

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
{Token.string == "be"}
{Token.string == "being"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.FutureContinuousPassive = {
type = "VT",
tense = "FutureContinuous",
voice = "passive",
rule = "VTFutureContinuousPas"
}


Rule: VTFuturePerfectActive
// Future Pefect Active: will have eaten

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
{Token.string == "have"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.FuturePerfectActive = {
type = "VT",
tense = "FuturePerfect",
voice = "Active",
rule = "VTFuturePerfectActive"
}

Rule: VTFuturePerfectPas
// Future Pefect Passive: will have being eaten

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
{Token.string == "have"}
{Token.string == "been"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.FuturePerfectPassive = {
type = "VT",
tense = "FuturePerfect",
voice = "passive",
rule = "VTFuturePerfectPas"
}


Rule: VTFuturePerfectConActive
// Future Pefect Continuous Active: will have been eating

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
{Token.string == "have"}
{Token.string == "been"}
(ADVS)?
{Token.category == VBG}
):annotate 
-->
:annotate.FuturePerfectContinuousActive = {
type = "VT",
tense = "FuturePerfectContinuous",
voice = "Active",
rule = "VTFuturePerfectConActive"
}



Rule: VTFuturePerfectConPas
// Future Perfect Continuous Passive: will have been being eaten

(
({Token.string == "will"} | {Token.string == "shall"}
| {Token.string == "wo"} | {Token.string == "'ll"}
)
{Token.string == "have"}
{Token.string == "been"}
{Token.string == "being"}
(ADVS)?
{Token.category == VBN}
):annotate 
-->
:annotate.FuturePerfectContinuousPassive = {
type = "VT",
tense = "FuturePerfectContinuous",
voice = "passive",
rule = "VTFuturePerfectConPas"
}





































































